Exercise 1
	Scenario 1
		1. because stepsize * sizeof(int) is exactly equal to cache size
		2. still be 0
		3. change stepsize to 1

	Scenario 2
		1. 2
		2. miss hit hit hit
		3. 0.75
		4. close to 1, because every block is in the cache
		5. 1st, 3rd, 4th -> subset, 2nd -> function 

	Scenario 3
		1. 0.5, 0, 1/3
		2. 32, 16
		3. 16
		4. swap the value of L2 block size and L2 num of block
		5. doesn't change; hit rate for L1 increases, hit rate for L2 doesn't change

Exercise 2
	ijk:    n = 1000, 2.162 Gflop/s
	ikj:    n = 1000, 0.184 Gflop/s
	jik:    n = 1000, 2.076 Gflop/s
	jki:    n = 1000, 14.372 Gflop/s
	kij:    n = 1000, 0.181 Gflop/s
	kji:    n = 1000, 12.537 Gflop/s

	1. jki
	2. kij
	3. the larger stride in the most inner loop, the lower performance

Exercise 3
	Part 1
		blocksize = 20, n = 100: naive: 0.004, blocking: 0.008 
		blocksize = 20, n = 1000: naive: 0.913, blocking: 1.424
		blocksize = 20, n = 2000: naive: 19.332, blocking: 17.399
		blocksize = 20, n = 5000: naive: 158.5, blocking: 139.186
		blocksize = 20, n = 10000: naive: 732.551, blocking: 607.631

		1. n = 2000
		2. for small n, the hit rate for naive approach is high enough

	Part 2
		blocksize = 50, n = 10000: naive: 756.047, blocking: 641.965
		blocksize = 100, n = 10000: naive: 814.743, blocking: 634.146
		blocksize = 500, n = 10000: naive: 799.19, blocking: 619.578
		blocksize = 1000, n = 10000: naive: 728.548, blocking: 673.526
		blocksize = 5000, n = 10000: naive: 786.872, blocking: 656.05

		1. for large blocksize, the cache cannot contain the whole block data
